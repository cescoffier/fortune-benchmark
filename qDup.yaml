name: Build and run fortune benchmark
scripts:

  # Benchmark setup ------------------------------------------------------------------------------------------------------------

  build-fortune:
    - script: sdk-select-jdk
    - sh: mkdir -p ${{WORKDIR}}/fortune
    - read-state: ${{BUILD_TYPE}}
      then:
        - regex: local
          then:
            - script: build-fortune-local
        - regex: remote
          then:
            - script: build-fortune-remote

  build-fortune-local:
    - read-state: ${{SERVER_IMPL}}
    - for-each: IMPLEMENTATION
      then:
        - upload: ${{ENV.SCRIPT_DIR}}/${{IMPLEMENTATION}}/target/quarkus-app ${{WORKDIR}}/fortune/${{IMPLEMENTATION}}

  build-fortune-remote:
    - script: sdk-install-maven
    - sh: git clone -q ${{BENCHMARK_REPO_URL}} ${{WORKDIR}}/fortune-src && git -C ${{WORKDIR}}/fortune-src -c advice.detachedHead=false checkout ${{BENCHMARK_REPO_COMMIT:main}}
    - sh: cd ${{WORKDIR}}/fortune-src
    - sh: mkdir -p ${{WORKDIR}}/fortune-src/m2-repo
    - read-state: ${{QUARKUS_REPO_COMMIT}}
      then:
        - script: build-custom-quarkus
        - sh: cd ${{WORKDIR}}/fortune-src
        - sh: mvn -B -q versions:set-property -Dproperty=quarkus.version -DnewVersion=${{QUARKUS_VERSION}} -Dmaven.repo.local=${{WORKDIR}}/fortune-src/m2-repo
    - queue-download: fortune-maven.txt
    - log: Building fortune benchmark from source ${{BENCHMARK_REPO_URL}} @ ${{BENCHMARK_REPO_COMMIT:main}}
    - sh: mvn -B package -DskipTests -Dmaven.repo.local=${{WORKDIR}}/fortune-src/m2-repo | tee fortune-maven.txt | grep -e "BUILD SUCCESS"
      idle-timer: 5m
      then:
        - regex: BUILD SUCCESS
          else:
            - abort: Failed to build Fortune Benchmark
    - read-state: ${{SERVER_IMPL}}
    - for-each: IMPLEMENTATION
      then:
        - sh: cp -r ${{IMPLEMENTATION}}/target/quarkus-app ${{WORKDIR}}/fortune/${{IMPLEMENTATION}}
          then:
            - regex: No such file or directory
              then:
                - abort: Failed to copy benchmark ${{IMPLEMENTATION}}

  build-custom-quarkus:
    - sh: git clone -q ${{QUARKUS_REPO_URL}} ${{WORKDIR}}/fortune-src/custom-quarkus && git -C ${{WORKDIR}}/fortune-src/custom-quarkus -c advice.detachedHead=false checkout ${{QUARKUS_REPO_COMMIT}}
    - sh: cd ${{WORKDIR}}/fortune-src/custom-quarkus
    - queue-download: quarkus-maven.txt
    - log: Building quarkus from source ${{QUARKUS_REPO_URL}} @ ${{QUARKUS_REPO_COMMIT}}
    - sh: MAVEN_OPTS="-Xmx8g" ./mvnw -Dquickly -Dmaven.repo.local=${{WORKDIR}}/fortune-src/m2-repo | tee quarkus-maven.txt | grep -e "BUILD SUCCESS"
      idle-timer: 10m
      then:
        - regex: BUILD SUCCESS
          then:
            - sh: ./mvnw -B -q help:evaluate -Dexpression=project.version -DforceStdout -Dmaven.repo.local=${{WORKDIR}}/fortune-src/m2-repo
            - set-state: QUARKUS_VERSION
          else:
            - abort: Failed to build Quarkus

  cleanup-fortune:
    - sh: rm -fr ${{WORKDIR}}/fortune-src
    - sh: rm -fr ${{WORKDIR}}/fortune

  # Tools

  install-sdkman:
    - sh: source ~/.sdkman/bin/sdkman-init.sh
    - regex: No such file or directory
      then:
        - sh: curl -s https://get.sdkman.io/?rcupdate=false | bash
          then:
            - regex: Enjoy|SDKMAN found
              else:
                - abort: Failed to install SDKMAN
        - sh: source ~/.sdkman/bin/sdkman-init.sh
      else:
        - sh: sdk selfupdate force
          then:
            - regex: Successfully upgraded SDKMAN
              else:
                - abort: Failed to upgrade SDKMAN

  uninstall-sdkman:
    - log: Leaving sdkman installed
    # - sh: unset -f sdk
    # - sh: rm -fr ~/.sdkman

  sdk-select-jdk:
    - sh:
        command: sdk install java ${{JAVA_VERSION:19.0.2-open}}
        prompt:
          "set as default? (Y/n): ": Y
    - sh: sdk use java ${{JAVA_VERSION:19.0.2-open}}
    - sh: java -version

  sdk-install-maven:
    - sh: which mvn
    - regex: no mvn in
      then:
        - sh:
            command: sdk install maven ${{MAVEN_VERSION:3.8.7}}
            prompt:
              "set as default? (Y/n): ": Y
    - sh: mvn -version

  # Hyperfoil setup

  get-hyperfoil:
    - sh: mkdir -p ${{WORKDIR}}/hyperfoil
    - sh: cd ${{WORKDIR}}/hyperfoil
    - sh: wget -q -nc https://repo1.maven.org/maven2/io/hyperfoil/hyperfoil-distribution/${{HYPERFOIL_VERSION}}/hyperfoil-distribution-${{HYPERFOIL_VERSION}}.zip
    - sh: unzip -q hyperfoil-distribution-${{HYPERFOIL_VERSION}}.zip
    - sh: sed -i 's/^java/taskset --cpu-list ${{HYPERFOIL_CPUS}} &/' hyperfoil-${{HYPERFOIL_VERSION}}/bin/cli.sh

    - read-state: ${{BUILD_TYPE}}
      then:
        - regex: local
          then:
            - upload: ${{ENV.SCRIPT_DIR}}/fortune-benchmark-client/hyperfoil.yaml ${{WORKDIR}}/hyperfoil
        - regex: remote
          then:
            - sh: wget -q -nc ${{BENCHMARK_REPO_URL}}/raw/${{BENCHMARK_REPO_COMMIT:main}}/fortune-benchmark-client/hyperfoil.yaml

  cleanup-hyperfoil:
    - sh: rm -fr ${{WORKDIR}}/hyperfoil

  # Database setup

  start-container-engine:
    - read-state: ${{CONTAINER_ENGINE}}
      then:
        - regex: docker
          then:
            - sh: systemctl is-active docker
            - regex: inactive
              then:
                - sh: sudo systemctl start docker # attempt to start docker daemon
                - sh: systemctl is-active docker
                - regex: inactive
                  then:
                    - abort: Failed to start docker daemon

  start-databases:
    - sh:
        ${{CONTAINER_ENGINE}} run --detach --cpuset-cpus ${{DATABASE_CPUS}} -p 3306:3306 --name fortune-mariadb
        --env MARIADB_DATABASE=fortunedb
        --env MARIADB_USER=fortune
        --env MARIADB_PASSWORD=fbench-pw
        --env MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=true
        quay.io/mariadb-foundation/mariadb-devel:${{MARIADB_VERSION:latest}}
    - sh:
        ${{CONTAINER_ENGINE}} run --detach --cpuset-cpus ${{DATABASE_CPUS}} -p 5432:5432 --name fortune-postgres
        --env POSTGRESQL_DATABASE=fortunedb
        --env POSTGRESQL_USER=fortune
        --env POSTGRESQL_PASSWORD=fbench-pw
        quay.io/centos7/postgresql-${{POSTGRES_VERSION:13}}-centos7:latest

  stop-databases:
    - sh: ${{CONTAINER_ENGINE}} container ls -a | grep fortune-mariadb
    - regex: \w
      then:
        - sh: ${{CONTAINER_ENGINE}} container stop fortune-mariadb
        - sh: ${{CONTAINER_ENGINE}} container rm fortune-mariadb
    - sh: ${{CONTAINER_ENGINE}} container ls -a | grep fortune-postgres
    - regex: \w
      then:
        - sh: ${{CONTAINER_ENGINE}} container stop fortune-postgres
        - sh: ${{CONTAINER_ENGINE}} container rm fortune-postgres

  # Benchmark run --------------------------------------------------------------------------------------------------------------

  run-fortune:
    - script: sdk-select-jdk
    - read-state: ${{SERVER_IMPL}}
    - for-each: IMPLEMENTATION
      then:
        - sleep: 15s # allow for monitoring and profiling to reset
        - set-state: RUN.CURRENT_IMPLEMENTATION ${{IMPLEMENTATION}}
        - script: run-${{SERVER_IMPL_DB.${{IMPLEMENTATION}}.type}}
          state-scan: false
    - signal: BENCHMARK_DONE

  run-quarkus:
    - sh: cd ${{WORKDIR}}/fortune/${{IMPLEMENTATION}}
    - set-signal: HYPERFOIL_DONE 1
    - sh: export JAVA_OPTS="${{= ${{SERVER_IMPL_DB.${{IMPLEMENTATION}}.properties}}.map( function(p){ return "-D" + p; } ).join(\" \") }}"
    - read-state: ${{JDK_PARALLELISM}}
      then:
        - sh: JAVA_OPTS="$JAVA_OPTS -Djdk.virtualThreadScheduler.parallelism=${{JDK_PARALLELISM}}"
    - read-state: ${{QUARKUS_EVENT_LOOPS}}
      then:
        - sh: JAVA_OPTS="$JAVA_OPTS -Dquarkus.vertx.event-loops-pool-size=${{QUARKUS_EVENT_LOOPS}}"
    - read-state: ${{SERVER_MEMORY}}
      then:
        - sh: JAVA_OPTS="$JAVA_OPTS -Xms${{SERVER_MEMORY}} -Xmx${{SERVER_MEMORY}}"
    - sh: taskset --cpu-list ${{SERVER_CPUS}} java -XX:+UseNUMA -Dfortune-server-process $JAVA_OPTS ${{SERVER_OPTS}} -jar quarkus-run.jar
      idle-timer: 5m
      on-signal:
        HYPERFOIL_DONE:
          - ctrlC:
      watch:
        - regex: started
          then:
            - signal: FORTUNE_READY

  # HyperFoil run

  run-hyperfoil:
    - sh: mkdir -p ${{WORKDIR}}/hyperfoil/report
    - queue-download: ${{WORKDIR}}/hyperfoil/report
    - repeat-until: BENCHMARK_DONE
      then:
        - set-signal: FORTUNE_READY 1
        - wait-for: FORTUNE_READY
        - script: perform-hyperfoil-load-test
        - signal: HYPERFOIL_DONE
        - sleep: 1s # allow time for BENCHMARK_DONE to be set

  perform-hyperfoil-load-test:
    - add-prompt: "]$ " # Hyperfoil CLI session
    - sh: ${{WORKDIR}}/hyperfoil/hyperfoil-${{HYPERFOIL_VERSION}}/bin/cli.sh -XX:+UseNUMA
    - sh: start-local
    - sh: upload ${{WORKDIR}}/hyperfoil/hyperfoil.yaml
    - log: Hyperfoil is performing load test against ${{CURRENT_IMPLEMENTATION}}
    - sh: run fortune-benchmark
      silent: true
    - sh: stats
    - sh: export -y -d=${{WORKDIR}}/hyperfoil/report/${{CURRENT_IMPLEMENTATION}}-hyperfoil.json
    - sh: report -y -d=${{WORKDIR}}/hyperfoil/report/${{CURRENT_IMPLEMENTATION}}-hyperfoil.html
    - sh: exit # leave the Hyperfoil CLI session

  # Profiling -----------------------------------------------------------------------------------------------------------------

  setup-profiling:
    - read-state: ${{PROFILER}}
      then:
        - regex: async-jfr
          then:
            - script: setup-async-profiler
        - regex: async-flame
          then:
            - script: setup-async-profiler

  setup-async-profiler:
    - sh: sudo sysctl kernel.perf_event_paranoid=1
    - sh: sudo sysctl kernel.kptr_restrict=0
    - sh: cd ${{WORKDIR}}
    - sh: git clone -q ${{ASYNC_PROFILER_REPO_URL}} ${{WORKDIR}}/async-profiler-src && git -C ${{WORKDIR}}/async-profiler-src -c advice.detachedHead=false checkout ${{ASYNC_PROFILER_REPO_COMMIT:master}}
    - sh: cd ${{WORKDIR}}/async-profiler-src
    - sh: make all

  server-profiling:
    - sh: mkdir -p ${{WORKDIR}}/profiling
    - queue-download: ${{WORKDIR}}/profiling
    - repeat-until: BENCHMARK_DONE
      then:
        - set-signal: FORTUNE_READY 1
        - wait-for: FORTUNE_READY
        - sh: ps --format pid,cmd x | grep fortune-server-process | grep java | awk '{print $1}'
        - set-state: SERVER_PID
        - read-state: ${{PROFILER}}
          then:
            - regex: async-jfr
              then:
                - sh: ${{WORKDIR}}/async-profiler-src/profiler.sh start -o jfr -f ${{WORKDIR}}/profiling/${{CURRENT_IMPLEMENTATION}}-async.jfr ${{PROFILER_ARGS}} ${{SERVER_PID}}
                - sh: ${{WORKDIR}}/async-profiler-src/profiler.sh status ${{SERVER_PID}}
                - wait-for: HYPERFOIL_DONE
                - sh: ${{WORKDIR}}/async-profiler-src/profiler.sh stop ${{SERVER_PID}} > ${{WORKDIR}}/profiling/${{CURRENT_IMPLEMENTATION}}-async.txt
            - regex: async-flame
              then:
                - sh: ${{WORKDIR}}/async-profiler-src/profiler.sh start ${{PROFILER_ARGS}} ${{SERVER_PID}}
                - sh: ${{WORKDIR}}/async-profiler-src/profiler.sh status ${{SERVER_PID}}
                - wait-for: HYPERFOIL_DONE
                - sh: ${{WORKDIR}}/async-profiler-src/profiler.sh stop -o flamegraph -f ${{WORKDIR}}/profiling/${{CURRENT_IMPLEMENTATION}}-async.html ${{SERVER_PID}}
        - sleep: 1s # allow time for BENCHMARK_DONE to be set

  cleanup-profiling:
    - sh: rm -fr ${{WORKDIR}}/profiling
    - sh: rm -fr ${{WORKDIR}}/async-profiler-src

  # Monitoring -----------------------------------------------------------------------------------------------------------------

  server-monitoring:
    - sh: mkdir -p ${{WORKDIR}}/monitoring
    - queue-download: ${{WORKDIR}}/monitoring
    - repeat-until: BENCHMARK_DONE
      then:
        - set-signal: FORTUNE_READY 1
        - wait-for: FORTUNE_READY
        - sh: ps --format pid,cmd x | grep fortune-server-process | grep java | awk '{print $1}'
        - set-state: SERVER_PID
        - sh: sudo pmap -x ${{SERVER_PID}} >> ${{WORKDIR}}/monitoring/${{CURRENT_IMPLEMENTATION}}-pmap.txt
        - sh: |
            while sleep 10 
            do
            # memory
              date >> ${{WORKDIR}}/monitoring/${{CURRENT_IMPLEMENTATION}}-mem.txt
              echo 'pmap=' $( sudo pmap -x ${{SERVER_PID}} | grep total | awk '{print $4}' | sed 's/[^0-9]*//g' ) >> ${{WORKDIR}}/monitoring/${{CURRENT_IMPLEMENTATION}}-mem.txt
              echo 'proc=' $( sudo cat /proc/${{SERVER_PID}}/status | grep VmRSS | awk '{print $2}' ) >> ${{WORKDIR}}/monitoring/${{CURRENT_IMPLEMENTATION}}-mem.txt
              echo -e >> ${{WORKDIR}}/monitoring/${{CURRENT_IMPLEMENTATION}}-mem.txt
            # cpu
              date >> ${{WORKDIR}}/monitoring/${{CURRENT_IMPLEMENTATION}}-top.txt
              top -b -d 1 -n 1 -1 -o +%CPU | head -80 >> ${{WORKDIR}}/monitoring/${{CURRENT_IMPLEMENTATION}}-top.txt
              echo -e >> ${{WORKDIR}}/monitoring/${{CURRENT_IMPLEMENTATION}}-top.txt
            done
          on-signal:
            HYPERFOIL_DONE:
              - ctrlC:
              - sleep: 1s # allow time for BENCHMARK_DONE to be set

  cleanup-monitoring:
    - sh: rm -fr ${{WORKDIR}}/monitoring

  # Pumba! ---------------------------------------------------------------------------------------------------------------------

  delay-databases:
    - read-state: ${{DATABASE_DELAY}}
      then:
        - sh: wget -q -nc https://github.com/alexei-led/pumba/releases/download/${{PUMBA_VERSION}}/pumba_linux_amd64
        - sh: chmod +x pumba_linux_amd64
        - set-signal: BENCHMARK_DONE 1
        - sh: ./pumba_linux_amd64 --log-level info netem --duration 1h --tc-image gaiadocker/iproute2 --pull-image delay ${{DATABASE_DELAY}} fortune-mariadb fortune-postgres
          on-signal:
            BENCHMARK_DONE:
              - ctrlC:
        - sh: rm pumba_linux_amd64

# qDUP -------------------------------------------------------------------------------------------------------------------------

hosts:
  server: ${{USER}}@${{HOST}}
  client: ${{USER}}@${{HOST}}
  database: ${{USER}}@${{HOST}}

roles:
  server:
    hosts: [ server ]
    setup-scripts:
      - install-sdkman
      - build-fortune
      - setup-profiling
    run-scripts:
      - run-fortune
      - server-monitoring
      - server-profiling
    cleanup-scripts:
      - uninstall-sdkman
      - cleanup-fortune
      - cleanup-monitoring
      - cleanup-profiling
  client:
    hosts: [ client ]
    setup-scripts:
      - get-hyperfoil
    run-scripts:
      - run-hyperfoil
    cleanup-scripts:
      - cleanup-hyperfoil
  database:
    hosts: [ database ]
    setup-scripts:
      - start-container-engine
      - stop-databases # cleanup from previous bogus runs
      - start-databases
    run-scripts:
      - delay-databases
    cleanup-scripts:
      - stop-databases

# State ------------------------------------------------------------------------------------------------------------------------

states:
  USER: me
  HOST: localhost
  WORKDIR: /tmp/fortune-benchmark-workdir

  # [docker / podman]
  CONTAINER_ENGINE: docker

  # Versions (leave empty for latest)
  HYPERFOIL_VERSION: 0.24
  PUMBA_VERSION: 0.9.7
  MARIADB_VERSION:
  POSTGRES_VERSION:

  # [local / remote] either upload the artifacts built locally or build remotely
  BUILD_TYPE: remote

  # Git location for remote build
  BENCHMARK_REPO_URL: https://github.com/cescoffier/fortune-benchmark
  BENCHMARK_REPO_COMMIT:

  # Git location for custom quarkus build
  QUARKUS_REPO_URL: https://github.com/quarkusio/quarkus
  QUARKUS_REPO_COMMIT:

  # List of server implementations to test
  SERVER_IMPL: [ fortune-blocking-mariadb, fortune-reactive-mariadb, fortune-virtual-thread-jdbc-mariadb, fortune-virtual-thread-mariadb ]
  SERVER_IMPL_DB:
    fortune-blocking-mariadb:
      type: quarkus
      properties: &quarkus-mariadb-jdbc-definition
        - "jdk19 --enable-preview --add-opens java.base/java.lang=ALL-UNNAMED"
        - "quarkus.datasource.jdbc.url=jdbc:mariadb://localhost/fortunedb"
        - "quarkus.datasource.username=fortune"
        - "quarkus.datasource.password=fbench-pw"
        - "quarkus.datasource.jdbc.max-size=100"
        - "quarkus.datasource.jdbc.detect-statement-leaks=false"
    fortune-reactive-mariadb:
      type: quarkus
      properties: &quarkus-mariadb-reactive-definition
        - "jdk19 --enable-preview --add-opens java.base/java.lang=ALL-UNNAMED"
        - "quarkus.datasource.reactive.url=mariadb://localhost/fortunedb"
        - "quarkus.datasource.username=fortune"
        - "quarkus.datasource.password=fbench-pw"
        - "quarkus.datasource.reactive.max-size=100"
    fortune-virtual-thread-jdbc-mariadb:
      type: quarkus
      properties: *quarkus-mariadb-jdbc-definition
    fortune-virtual-thread-mariadb:
      type: quarkus
      properties: *quarkus-mariadb-reactive-definition
    fortune-blocking-postgresql:
      type: quarkus
      properties: &quarkus-postgresql-jdbc-definition
        - "jdk19 --enable-preview --add-opens java.base/java.lang=ALL-UNNAMED"
        - "quarkus.datasource.jdbc.url=jdbc:postgresql://localhost/fortunedb"
        - "quarkus.datasource.username=fortune"
        - "quarkus.datasource.password=fbench-pw"
        - "quarkus.datasource.jdbc.max-size=100"
        - "quarkus.datasource.jdbc.detect-statement-leaks=false"
    fortune-reactive-postgresql:
      type: quarkus
      properties: &quarkus-postgresql-reactive-definition
        - "jdk19 --enable-preview --add-opens java.base/java.lang=ALL-UNNAMED"
        - "quarkus.datasource.reactive.url=postgresql://localhost/fortunedb"
        - "quarkus.datasource.username=fortune"
        - "quarkus.datasource.password=fbench-pw"
        - "quarkus.datasource.reactive.max-size=100"
    fortune-virtual-thread-jdbc-postgresql:
      type: quarkus
      properties: *quarkus-postgresql-jdbc-definition
    fortune-virtual-thread-postgresql:
      type: quarkus
      properties: *quarkus-postgresql-reactive-definition

  # Profiler
  PROFILER:
  PROFILER_ARGS:

  ASYNC_PROFILER_REPO_URL: https://github.com/jvm-profiling-tools/async-profiler
  ASYNC_PROFILER_REPO_COMMIT: v2.9

  # CPU and memory restrictions
  JDK_PARALLELISM:
  QUARKUS_EVENT_LOOPS:
  SERVER_MEMORY:

  SERVER_CPUS: 0-1
  DATABASE_CPUS: 5-8
  HYPERFOIL_CPUS: 2-4

  # Options for Pumba! see https://github.com/alexei-led/pumba/blob/master/README.md#network-emulation-delay-sub-command
  DATABASE_DELAY:

  # Other options
  SERVER_OPTS:
