name: Build and run fortune benchmark
scripts:

  # Benchmark setup ------------------------------------------------------------------------------------------------------------

  build-fortune:
    - sh: sudo dnf -q -y install java-latest-openjdk
    - sh: export JAVA_HOME=/usr/lib/jvm/java-19
    - sh: mkdir -p ${{WORKDIR}}/fortune
    - read-state: ${{BUILD_TYPE}}
      then:
        - regex: local
          then:
            - script: build-fortune-local
        - regex: remote
          then:
            - script: build-fortune-remote

  build-fortune-local:
    - read-state: ${{SERVER_IMPL}}
    - for-each: IMPLEMENTATION
      then:
        - upload: ${{ENV.SCRIPT_DIR}}/${{IMPLEMENTATION.name}}/target/quarkus-app ${{WORKDIR}}/fortune/${{IMPLEMENTATION}}

  build-fortune-remote:
    - sh: sudo dnf -q -y install git maven
    - sh: git clone -q ${{BENCHMARK_REPO_URL}} ${{WORKDIR}}/fortune-src && git -C ${{WORKDIR}}/fortune-src -c advice.detachedHead=false checkout ${{BENCHMARK_REPO_COMMIT:main}}
    - sh: cd ${{WORKDIR}}/fortune-src
    - sh: mkdir -p ${{WORKDIR}}/fortune-src/m2-repo
    - read-state: ${{QUARKUS_REPO_COMMIT}}
      then:
        - script: build-custom-quarkus
        - sh: cd ${{WORKDIR}}/fortune-src
        - sh: mvn -B -q versions:set-property -Dproperty=quarkus.version -DnewVersion=${{QUARKUS_VERSION}} -Dmaven.repo.local=${{WORKDIR}}/fortune-src/m2-repo
    - queue-download: fortune-maven.txt
    - sh: mvn -B package -DskipTests -Dmaven.repo.local=${{WORKDIR}}/fortune-src/m2-repo | tee fortune-maven.txt | grep -e ERROR -e FAIL -e FAILURE
      then:
        - regex: ERROR | FATAL | FAILURE
          then:
            - abort: Failed to build Fortune Benchmark
    - read-state: ${{SERVER_IMPL}}
    - for-each: IMPLEMENTATION
      then:
        - sh: cp -r ${{IMPLEMENTATION.name}}/target/quarkus-app ${{WORKDIR}}/fortune/${{IMPLEMENTATION.name}}
          then:
            - regex: No such file or directory
              then:
                - abort: Failed to copy benchmark ${{IMPLEMENTATION.name}}

  build-custom-quarkus:
    - sh: git clone -q ${{QUARKUS_REPO_URL}} ${{WORKDIR}}/fortune-src/custom-quarkus && git -C ${{WORKDIR}}/fortune-src/custom-quarkus -c advice.detachedHead=false checkout ${{QUARKUS_REPO_COMMIT}}
    - sh: cd ${{WORKDIR}}/fortune-src/custom-quarkus
    - sh: ./mvnw -B -q -f independent-projects/ide-config/pom.xml install -Dmaven.repo.local=${{WORKDIR}}/fortune-src/m2-repo
    - sh: ./mvnw -B -q -f independent-projects/enforcer-rules/pom.xml install -Dmaven.repo.local=${{WORKDIR}}/fortune-src/m2-repo
    - sh: ./mvnw -B -q -f independent-projects/bootstrap/pom.xml install -Dmaven.repo.local=${{WORKDIR}}/fortune-src/m2-repo
    - sh: ./mvnw -B -q help:evaluate -Dexpression=project.version -DforceStdout
    - set-state: QUARKUS_VERSION
    - queue-download: quarkus-maven.txt
    - sh: ./mvnw -B install -Dquickly -DskipTests -Dmaven.repo.local=${{WORKDIR}}/fortune-src/m2-repo | tee quarkus-maven.txt | grep -e ERROR -e FAIL -e FAILURE
      idle-timer: 10m
      then:
        - regex: ERROR | FATAL | FAILURE
          then:
            - abort: Failed to build Quarkus

  cleanup-fortune:
    - sh: rm -fr ${{WORKDIR}}/fortune-src
    - sh: rm -fr ${{WORKDIR}}/fortune

  cleanup-monitoring:
    - sh: rm -fr ${{WORKDIR}}/cpu-monitoring
    - sh: rm -fr ${{WORKDIR}}/mem-monitoring

  # Hyperfoil setup

  get-hyperfoil:
    - sh: mkdir -p ${{WORKDIR}}/hyperfoil
    - sh: cd ${{WORKDIR}}/hyperfoil
    - sh: wget -q -nc https://repo1.maven.org/maven2/io/hyperfoil/hyperfoil-distribution/${{HYPERFOIL_VERSION}}/hyperfoil-distribution-${{HYPERFOIL_VERSION}}.zip
    - sh: unzip -q hyperfoil-distribution-${{HYPERFOIL_VERSION}}.zip
    - sh: sed -i 's/^java/taskset --cpu-list ${{HYPERFOIL_CPUS}} &/' hyperfoil-${{HYPERFOIL_VERSION}}/bin/cli.sh

    - read-state: ${{BUILD_TYPE}}
      then:
        - regex: local
          then:
            - upload: ${{ENV.SCRIPT_DIR}}/fortune-benchmark-client/hyperfoil.yaml ${{WORKDIR}}/hyperfoil
        - regex: remote
          then:
            - sh: wget -q -nc ${{BENCHMARK_REPO_URL}}/raw/${{BENCHMARK_REPO_COMMIT:main}}/fortune-benchmark-client/hyperfoil.yaml

  cleanup-hyperfoil:
    - sh: rm -fr ${{WORKDIR}}/hyperfoil

  # Database setup

  start-container-engine:
    - read-state: ${{CONTAINER_ENGINE}}
      then:
        - regex: docker
          then:
            - sh: sudo systemctl --no-pager status docker | grep Active
              then:
                - regex: "\\s*Active: (?<DOCKER_ACTIVE>\\w+) \\(.*"
                  then:
                    - sh: if [ "${{DOCKER_ACTIVE}}" == "inactive" ]; then sudo systemctl start docker; fi

  start-databases:
    - sh:
        ${{CONTAINER_ENGINE}} run --detach --cpuset-cpus ${{DATABASE_CPUS}} -p 3306:3306 --name fortune-mariadb
        --env MARIADB_DATABASE=fortunedb
        --env MARIADB_USER=fortune
        --env MARIADB_PASSWORD=fbench-pw
        --env MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=true
        quay.io/mariadb-foundation/mariadb-devel:${{MARIADB_VERSION:latest}}
    - sh:
        ${{CONTAINER_ENGINE}} run --detach --cpuset-cpus ${{DATABASE_CPUS}} -p 5432:5432 --name fortune-postgres
        --env POSTGRES_DATABASE=fortunedb
        --env POSTGRES_USER=fortune
        --env POSTGRES_PASSWORD=fbench-pw
        quay.io/centos7/postgresql-${{POSTGRES_VERSION:13}}-centos7:latest

  stop-databases:
    - sh: ${{CONTAINER_ENGINE}} container ls | grep fortune-mariadb
    - regex: .*
      then:
        - sh: ${{CONTAINER_ENGINE}} container stop fortune-mariadb
        - sh: ${{CONTAINER_ENGINE}} container rm fortune-mariadb
    - sh: ${{CONTAINER_ENGINE}} container ls | grep fortune-postgres
    - regex: .*
      then:
        - sh: ${{CONTAINER_ENGINE}} container stop fortune-postgres
        - sh: ${{CONTAINER_ENGINE}} container rm fortune-postgres

  # Benchmark run --------------------------------------------------------------------------------------------------------------

  run-fortune:
    - sh: export JAVA_HOME=/usr/lib/jvm/java-19

    - read-state: ${{SERVER_IMPL}}
    - for-each: IMPLEMENTATION
      then:
        - set-state: RUN.CURRENT_IMPLEMENTATION ${{IMPLEMENTATION.name}}
        - script: run-${{IMPLEMENTATION.type}}
        - sleep: 15s # allow for monitoring and profiling to reset
    - signal: BENCHMARK_DONE

  run-quarkus:
    - sh: cd ${{WORKDIR}}/fortune/${{IMPLEMENTATION.name}}
    - set-signal: HYPERFOIL_DONE 1
    - sh: JAVA_OPTS=${{= "\"" + IMPLEMENTATION.properties.map( function(p){ return "-D" + p; } ).join( " " ) + "\"" }}
    - sh: taskset --cpu-list ${{SERVER_CPUS}} $JAVA_HOME/bin/java -Dfortune-server-process $JAVA_OPTS -jar quarkus-run.jar
      on-signal:
        HYPERFOIL_DONE:
          - ctrlC:
      watch:
        - regex: started
          then:
            - signal: FORTUNE_READY

  # HyperFoil run

  run-hyperfoil:
    - sh: export JAVA_HOME=/usr/lib/jvm/java-19
    - sh: mkdir -p ${{WORKDIR}}/hyperfoil/report
    - queue-download: ${{WORKDIR}}/hyperfoil/report
    - repeat-until: BENCHMARK_DONE
      then:
        - set-signal: FORTUNE_READY 1
        - wait-for: FORTUNE_READY
        - script: perform-hyperfoil-load-test
        - signal: HYPERFOIL_DONE

  perform-hyperfoil-load-test:
    - add-prompt: "]$ " # CLI session
    - sh: ${{WORKDIR}}/hyperfoil/hyperfoil-${{HYPERFOIL_VERSION}}/bin/cli.sh
    - sh: start-local
    - sh: upload ${{WORKDIR}}/hyperfoil/hyperfoil.yaml
    - log: Hyperfoil is performing load test against ${{CURRENT_IMPLEMENTATION}}
    - sh: run fortune-benchmark
      silent: true
    - sh: stats
    - sh: export -y -d=${{WORKDIR}}/hyperfoil/report/${{CURRENT_IMPLEMENTATION}}-hyperfoil.json
    - sh: report -y -d=${{WORKDIR}}/hyperfoil/report/${{CURRENT_IMPLEMENTATION}}-hyperfoil.html
    - sh: exit # leave the CLI session

  # Monitoring -----------------------------------------------------------------------------------------------------------------

  server-monitoring:
    - sh: mkdir -p ${{WORKDIR}}/cpu-monitoring
    - sh: mkdir -p ${{WORKDIR}}/mem-monitoring
    - queue-download: ${{WORKDIR}}/cpu-monitoring
    - queue-download: ${{WORKDIR}}/mem-monitoring
    - repeat-until: BENCHMARK_DONE
      then:
        - set-signal: FORTUNE_READY 1
        - wait-for: FORTUNE_READY
        - sh: ps --format pid,cmd x | grep fortune-server-process | grep java | awk '{print $1}'
        - set-state: SERVER_PID
        - sh: sudo pmap -x ${{SERVER_PID}} >> ${{WORKDIR}}/mem-monitoring/${{CURRENT_IMPLEMENTATION}}-pmap.txt
        - repeat-until: HYPERFOIL_DONE
          then:
            # memory
            - sh: date >> ${{WORKDIR}}/mem-monitoring/${{CURRENT_IMPLEMENTATION}}-mem.txt
            - sh: echo 'pmap= ' $( sudo pmap -x ${{SERVER_PID}} | grep total | awk '{print $4}' | sed 's/[^0-9]*//g' ) >> ${{WORKDIR}}/mem-monitoring/${{CURRENT_IMPLEMENTATION}}-mem.txt
            - sh: echo 'proc= ' $( sudo cat /proc/${{SERVER_PID}}/status | grep VmRSS | awk '{print $2}' ) >> ${{WORKDIR}}/mem-monitoring/${{CURRENT_IMPLEMENTATION}}-mem.txt
            - sh: echo -e >> ${{WORKDIR}}/mem-monitoring/${{CURRENT_IMPLEMENTATION}}-mem.txt
            # cpu
            - sh: date >> ${{WORKDIR}}/cpu-monitoring/${{CURRENT_IMPLEMENTATION}}-top.txt
            - sh: top -b -d 1 -n 1 -1 -o +%CPU | head -80 >> ${{WORKDIR}}/cpu-monitoring/${{CURRENT_IMPLEMENTATION}}-top.txt
            - sh: echo -e >> ${{WORKDIR}}/cpu-monitoring/${{CURRENT_IMPLEMENTATION}}-top.txt
            - sleep: 10s

# qDUP -------------------------------------------------------------------------------------------------------------------------

hosts:
  server: ${{USER}}@${{HOST}}
  client: ${{USER}}@${{HOST}}
  database: ${{USER}}@${{HOST}}

roles:
  server:
    hosts: [ server ]
    setup-scripts:
      - build-fortune
    run-scripts:
      - run-fortune
      - server-monitoring
    cleanup-scripts:
      - cleanup-fortune
      - cleanup-monitoring
  client:
    hosts: [ client ]
    setup-scripts:
      - get-hyperfoil
    run-scripts:
      - run-hyperfoil
    cleanup-scripts:
      - cleanup-hyperfoil
  database:
    hosts: [ database ]
    setup-scripts:
      - start-container-engine
      - stop-databases # cleanup from previous bogus runs
      - start-databases
    cleanup-scripts:
      - stop-databases

# State ------------------------------------------------------------------------------------------------------------------------

states:
  USER: me
  HOST: localhost
  WORKDIR: /tmp/fortune-benchmark-workdir

  # [docker / podman]
  CONTAINER_ENGINE: docker

  # Versions (leave empty for latest)
  HYPERFOIL_VERSION: 0.24
  MARIADB_VERSION:
  POSTGRES_VERSION:

  # [local / remote] either upload the artifacts built locally or build remotely
  BUILD_TYPE: remote

  # Git location for remote build
  BENCHMARK_REPO_URL: https://github.com/cescoffier/fortune-benchmark
  BENCHMARK_REPO_COMMIT:

  # Git location for custom quarkus build
  QUARKUS_REPO_URL: https://github.com/quarkusio/quarkus
  QUARKUS_REPO_COMMIT:
    
  # List of server implementations to test
  SERVER_IMPL: [
    {
      name: fortune-blocking-mariadb,
      type: quarkus,
      properties: &quarkus-mariadb-jdbc-definition [
        "jdk19 --enable-preview",
        "quarkus.datasource.jdbc.url=jdbc:mariadb://localhost/fortunedb",
        "quarkus.datasource.username=fortune",
        "quarkus.datasource.password=fbench-pw",
        "quarkus.datasource.jdbc.max-size=100",
        "quarkus.datasource.jdbc.detect-statement-leaks=false",
      ],
    }, {
      name: fortune-reactive-mariadb,
      type: quarkus,
      properties: &quarkus-mariadb-reactive-definition [
        "jdk19 --enable-preview",
        "quarkus.datasource.reactive.url=mariadb://localhost/fortunedb",
        "quarkus.datasource.username=fortune",
        "quarkus.datasource.password=fbench-pw",
        "quarkus.datasource.reactive.max-size=100",
      ],
    }, {
      name: fortune-virtual-thread-jdbc-mariadb,
      type: quarkus,
      properties: *quarkus-mariadb-jdbc-definition,
    }, {
      name: fortune-virtual-thread-mariadb,
      type: quarkus,
      properties: *quarkus-mariadb-reactive-definition,
    } ]

  # CPU restrictions
  SERVER_CPUS: 0-2
  DATABASE_CPUS: 8-16
  HYPERFOIL_CPUS: 32-64
